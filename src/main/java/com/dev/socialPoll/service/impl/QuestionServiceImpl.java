package com.dev.socialPoll.service.impl;

import com.dev.socialPoll.dao.DaoFactory;
import com.dev.socialPoll.dao.QuestionDao;
import com.dev.socialPoll.entity.Question;
import com.dev.socialPoll.exception.DaoException;
import com.dev.socialPoll.exception.ServiceException;
import com.dev.socialPoll.service.QuestionService;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.util.List;
import java.util.Optional;

public class QuestionServiceImpl implements QuestionService {

    private static final Logger logger = LogManager.getLogger();


    @Override
    public List<Question> retrieveQuestionsByPoll(long pollId) throws ServiceException {
        try {
            QuestionDao questionDao = DaoFactory.getInstance().getQuestionDao();
            List<Question> result = questionDao.findByPollId(pollId);
            return result;
        } catch (DaoException e) {
            logger.error("Unable to retrieve questions by poll id!");
            throw new ServiceException(e.getMessage(), e);
        }
    }

    @Override
    public Optional<Question> retrieveQuestionById(long questionId) throws ServiceException {
        try {
            QuestionDao questionDao = DaoFactory.getInstance().getQuestionDao();
            Optional<Question> result = questionDao.findById(questionId);
            return result;
        } catch (DaoException e) {
            logger.error("Unable to retrieve question by ID!");
            throw new ServiceException("Error occurred while retrieving question by ID.", e);
        }
    }

    @Override
    public boolean addNewQuestion(long pollId, String questionText) throws ServiceException {
        try {
            QuestionDao questionDao = DaoFactory.getInstance().getQuestionDao();
            Question newQuestion = new Question(0, pollId, questionText); // Assuming the ID will be generated by the database
            questionDao.save(newQuestion);
            return true;
        } catch (DaoException e) {
            logger.error("Unable to add a new question!");
            throw new ServiceException("Error occurred while adding a new question.", e);
        }
    }

    @Override
    public boolean updateQuestionInformation(long questionId, String questionText) throws ServiceException {
        try {
            QuestionDao questionDao = DaoFactory.getInstance().getQuestionDao();
            Question existingQuestion = questionDao.findById(questionId)
                    .orElseThrow(() -> new ServiceException("Question with ID " + questionId + " not found."));

            existingQuestion.setQuestionText(questionText);
            questionDao.update(existingQuestion);
            return true;
        } catch (DaoException e) {
            logger.error("Unable to update question information!");
            throw new ServiceException("Error occurred while updating question information.", e);
        }
    }

    @Override
    public boolean deleteQuestion(long questionId) throws ServiceException {
        return false;
    }


    @Override
    public boolean increaseParticipantsCount(long questionId) throws ServiceException {
        return false;
    }
}
